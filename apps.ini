@(
	@{
		Description = "Cloudflare DNS-over-HTTPS"
		Name = "dns"
		Code =
		{
			Get-NetAdapter -Physical | ForEach-Object {
				Set-DnsClientServerAddress $_.InterfaceAlias -ServerAddresses ("1.1.1.1","1.0.0.1","2606:4700:4700::1111","2606:4700:4700::1001")
				$path = 'HKLM:System\CurrentControlSet\Services\Dnscache\InterfaceSpecificParameters\' + $_.InterfaceGuid + '\DohInterfaceSettings'
				New-Item -Path $path\Doh\1.1.1.1 -Force | New-ItemProperty -Name "DohFlags" -Value 1 -PropertyType QWORD
				New-Item -Path $path\Doh\1.0.0.1 -Force | New-ItemProperty -Name "DohFlags" -Value 1 -PropertyType QWORD
				New-Item -Path $path\Doh6\2606:4700:4700::1111 -Force | New-ItemProperty -Name "DohFlags" -Value 1 -PropertyType QWORD
				New-Item -Path $path\Doh6\2606:4700:4700::1001 -Force | New-ItemProperty -Name "DohFlags" -Value 1 -PropertyType QWORD
			}
			Clear-DnsClientCache
		}
	}
	@{
		Description = "Update store apps"
		Name = "store"
		Code =
		{
			Get-CimInstance -Namespace 'root\cimv2\mdm\dmmap' -ClassName 'MDM_EnterpriseModernAppManagement_AppManagement01' | Invoke-CimMethod -MethodName UpdateScanMethod
		}
	}
	@{
		Description = "Office, Word, Excel 365 mondo volume license"
		Name = "office"
		Code =
		{
			iwr 'https://github.com/farag2/Office/releases/latest/download/Office.zip' -OutFile '.\Office.zip'
			Expand-Archive -ErrorAction SilentlyContinue -Force '.\Office.zip' '.\'
			pushd '.\Office'
			(gc '.\Default.xml').replace('Display Level="Full"', 'Display Level="None"') | sc '.\Default.xml'
			iex '.\Download.ps1 -Branch O365ProPlusRetail -Channel Current -Components Word, Excel, PowerPoint'
			iex '.\Install.ps1'
			& ([ScriptBlock]::Create((irm https://massgrave.dev/get))) /KMS-Office /KMS-ActAndRenewalTask /S
			popd
		}
	}
	@{
		Description = "SpotX spotify modification"
		Name = "spotx"
		Code =
		{
			[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
			iex "& { $((iwr -useb 'https://raw.githubusercontent.com/amd64fox/SpotX/main/Install.ps1').Content) } -premium -new_theme -podcasts_on -block_update_on -cache_on"
		}
	}
	@{
		Description = "GoodbyeDPI mode 5 + blacklist update"
		Name = "dpi"
		Code =
		{
			iwr 'https://github.com/ValdikSS/GoodbyeDPI/releases/latest/download/goodbyedpi-0.2.2.zip' -OutFile '.\goodbyedpi.zip'
			Expand-Archive -ErrorAction SilentlyContinue -Force '.\goodbyedpi.zip' $Env:Programfiles
			dir -Path $Env:Programfiles -ErrorAction SilentlyContinue -Force | where {$_ -match 'goodbyedpi*'} | %{$dir = $_.FullName}
			'`n' |& "$dir\service_install_russia_blacklist.cmd"
			write-host "`nBlacklist updating process`n"
			for ($i = 1; $i -lt 6; $i++)
			{   
    				try
				{
        				write-host -NoNewline "Attempt $i of 5"
        				iwr "https://antizapret.prostovpn.org/domains-export.txt" -OutFile "$dir\russia-blacklist.txt"
					write-host ": success"
        				break
    				} catch
				{
        				write-host ": server not responding"
        				Start-Sleep -Seconds 1
    				}
			}
		}
	}
	@{
		Description = "DirectX"
		Name = "directx"
		Code =
		{
			winget install --id=Microsoft.DirectX --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Microsoft Visual C++ 2015-2022"
		Name = "vcredist"
		Code =
		{
			winget install --id=Microsoft.VCRedist.2015+.x64 --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Google Chrome"
		Name = "chrome"
		Code =
		{
			winget install --id=Google.Chrome --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Discord"
		Name = "discord"
		Code =
		{
			winget install --id=Discord.Discord --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Steam"
		Name = "steam"
		Code =
		{
			winget install --id=Valve.Steam --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "qBittorrent"
		Name = "qbit"
		Code =
		{
			winget install --id=qBittorrent.qBittorrent --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "7-Zip"
		Name = "zip"
		Code =
		{
			winget install --id=7zip.7zip --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Google Drive"
		Name = "gdrive"
		Code =
		{
			winget install --id=Google.Drive --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Adguard"
		Name = "adguard"
		Code =
		{
			winget install --id=AdGuard.AdGuard --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "Blender"
		Name = "blender"
		Code =
		{
			winget install --id=BlenderFoundation.Blender --accept-package-agreements --accept-source-agreements --exact --silent
		}
	}
	@{
		Description = "OpenRGB + uffemcev rgb"
		Name = "open"
		Code =
		{
			iwr 'https://github.com/uffemcev/OpenRGB/releases/download/0.81/OpenRGB.zip' -OutFile '.\OpenRGB.zip'
			Expand-Archive -ErrorAction SilentlyContinue -Force '.\OpenRGB.zip' $env:APPDATA
			dir -Path $env:APPDATA -ErrorAction SilentlyContinue -Force -Recurse | where {$_ -match 'OpenRGB.exe'} | %{ni -ItemType SymbolicLink -Target $_.FullName -Path ([Environment]::GetFolderPath("Desktop") + "\OpenRGB")}
			& ([ScriptBlock]::Create((irm raw.githubusercontent.com/uffemcev/rgb/main/rgb.ps1)))
		}
	}
	@{
		Description = "K-Lite Codec Pack Full manual setup"
		Name = "codec"
		Code =
		{
			winget install --id=CodecGuide.K-LiteCodecPack.Full --accept-package-agreements --accept-source-agreements --exact --interactive
		}
	}
	@{
		Description = "NVCleanstall manual setup"
		Name = "nvidia"
		Code =
		{
			winget install --id=TechPowerUp.NVCleanstall --accept-package-agreements --accept-source-agreements --exact --interactive
		}
	}
	@{
		Description = "Windows 11 22H2 iso folder"
		Name = "win"
		Code =
		{
			$os = "Windows 11, version 22H2 [x64]"
			$apps = "WindowsStore", "Purchase", "VCLibs", "Photos", "Notepad", "Terminal", "Installer"
			$options = "AutoStart", "AddUpdates", "Cleanup", "ResetBase", "SkipISO", "SkipWinRE", "CustomList", "AutoExit"
			$link = iwr -Useb -Uri "https://uup.rg-adguard.net/api/GetVersion?id=1"
			$link = ($link.Content -split "},{" | Select-String -SimpleMatch $os) -replace ('"UpdateId":"'), ('') -replace ('".*$'), ('')
			[string]$link = (iwr -Useb -Uri "https://uup.rg-adguard.net/api/GetFiles?id=$link&lang=ru-ru&edition=core&pack=ru&down_aria2=yes").Links.href | Select-String -SimpleMatch "downUUP"
			iwr $link -OutFile '.\download-UUP.cmd'
			iwr 'https://github.com/uup-dump/containment-zone/raw/master/7zr.exe' -OutFile '.\7zr.exe'
			iwr 'https://github.com/uup-dump/containment-zone/raw/master/uup-converter-wimlib.7z' -OutFile '.\uup.7z'
			.\7zr.exe x *.7z
			(gc ".\download-UUP.cmd") -replace '^set "destDir.*$','set "destDir=UUPs"' | sc '.\download-UUP.cmd'
			(gc ".\download-UUP.cmd") -replace 'pause','' | sc '.\download-UUP.cmd'
			(gc ".\ConvertConfig.ini") -replace ' ','' | sc '.\ConvertConfig.ini'
			foreach ($app in $apps)
			{
				$file = (gc ".\CustomAppsList.txt") -split "# " | Select-String -Pattern $app
				((gc '.\CustomAppsList.txt') -replace ("# " + $file), ($file)) | sc '.\CustomAppsList.txt'
			}
			foreach ($option in $options)
			{
				((gc '.\ConvertConfig.ini') -replace ("^" + $option + "=0"), ($option + "=1")) | sc '.\ConvertConfig.ini'
			}
			iex ".\download-UUP.cmd"
			iex ".\convert-UUP.cmd"
			dir -ErrorAction SilentlyContinue -Force | where {$_ -match '^*.X64.*$'} | mi -Destination ([Environment]::GetFolderPath("Desktop"))
		}
	}
	<#
	НОВОЕ ПРИЛОЖЕНИЕ
	NEW APP
	@{
		Description = ""
		Name = ""
		Code =
		{
			
		}
	}
	#>
)
